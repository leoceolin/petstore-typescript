/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import { usersCreateWithList } from "../funcs/usersCreateWithList.js";
import { usersDelete } from "../funcs/usersDelete.js";
import { usersLogin } from "../funcs/usersLogin.js";
import { usersLogout } from "../funcs/usersLogout.js";
import { usersUpdate } from "../funcs/usersUpdate.js";
import { ClientSDK, RequestOptions } from "../lib/sdks.js";
import * as components from "../models/components/index.js";
import * as operations from "../models/operations/index.js";
import { unwrapAsync } from "../types/fp.js";

export class Users extends ClientSDK {
  /**
   * Creates list of users with given input array
   *
   * @remarks
   * Creates list of users with given input array
   */
  async createWithList(
    request?: Array<components.User> | undefined,
    options?: RequestOptions,
  ): Promise<components.User> {
    return unwrapAsync(usersCreateWithList(
      this,
      request,
      options,
    ));
  }

  /**
   * Logs user into the system
   */
  async login(
    request: operations.LoginUserRequest,
    options?: RequestOptions,
  ): Promise<operations.LoginUserResponse> {
    return unwrapAsync(usersLogin(
      this,
      request,
      options,
    ));
  }

  /**
   * Logs out current logged in user session
   */
  async logout(
    options?: RequestOptions,
  ): Promise<void> {
    return unwrapAsync(usersLogout(
      this,
      options,
    ));
  }

  /**
   * Update user
   *
   * @remarks
   * This can only be done by the logged in user.
   */
  async update(
    request: operations.UpdateUserRequest,
    options?: RequestOptions,
  ): Promise<void> {
    return unwrapAsync(usersUpdate(
      this,
      request,
      options,
    ));
  }

  /**
   * Delete user
   *
   * @remarks
   * This can only be done by the logged in user.
   */
  async delete(
    request: operations.DeleteUserRequest,
    options?: RequestOptions,
  ): Promise<components.User> {
    return unwrapAsync(usersDelete(
      this,
      request,
      options,
    ));
  }
}
